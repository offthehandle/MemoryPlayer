/*! Memory Player module. Copyright 2015-2018 Adam De Lucia. */function isRestartable(a){var b=!0;return a.hasOwnProperty("isMuted")||(b=!1),a.hasOwnProperty("isPaused")||(b=!1),a.hasOwnProperty("playlist")||(b=!1),a.hasOwnProperty("time")||(b=!1),a.hasOwnProperty("track")||(b=!1),a.hasOwnProperty("volume")||(b=!1),b}!function(){"use strict";angular.module("MemoryPlayer",[])}();var MemoryPlayerProvider=function(){function a(){}/**
     * Gets jplayer ids and instance.
     * @memberof MemoryPlayerProvider
     * @instance
     * @returns {IJPlayerProvider} - The return value of provider.
     */
/**
     * Sets jplayer ids.
     * @memberof MemoryPlayerProvider
     * @instance
     * @param {IJPlayerIds} ids - The CSS selectors to instantiate a playlist jplayer.
     */
/**
     * Sets jplayer options.
     * @memberof MemoryPlayerProvider
     * @instance
     * @param {any} options - The options to instantiate a playlist jplayer.
     */
return a.prototype.$get=function(){var a=this;return{ids:this.JPlayerIds,create:function(b){
// If jplayer is defined then allow create
angular.isUndefined(a.JPlayer)&&(
// Sets immutable jplayer instance
a.JPlayer=new jPlayerPlaylist(a.JPlayerIds,b,a.JPlayerOptions))},instance:function(){return a.JPlayer}}},a.prototype.$setIds=function(a){this.JPlayerIds=a},a.prototype.$setOptions=function(a){this.JPlayerOptions=a},a}();!function(){"use strict";angular.module("MemoryPlayer").provider("JPlayer",MemoryPlayerProvider)}();var MemoryPlayerConfig=function(){function a(a,b){this.$locationProvider=a,this.JPlayerProvider=b,this.JPlayerIds={jPlayer:"#mp-jquery_jplayer",cssSelectorAncestor:"#mp-jp_container"},this.JPlayerOptions={swfPath:"/js/jquery.jplayer.swf",supplied:"mp3",wmode:"window",audioFullScreen:!1,smoothPlayBar:!1,keyEnabled:!1,playlistOptions:{enableRemoveControls:!1,displayTime:0,addTime:0,removeTime:0,shuffleTime:0}},this.JPlayerProvider.$setIds(this.JPlayerIds),this.JPlayerProvider.$setOptions(this.JPlayerOptions),this.$locationProvider.html5Mode({enabled:!0,requireBase:!1})}return a}();MemoryPlayerConfig.instance=["$locationProvider","JPlayerProvider",MemoryPlayerConfig];var MemoryPlayerRun=function(){function a(a,b){this.$rootScope=a,this.$window=b,this.$rootScope.$on("$locationChangeSuccess",function(a,b,c){b!==c&&(this.$window.location.href=b)})}return a}();MemoryPlayerRun.instance=["$rootScope","$window",MemoryPlayerRun],function(){"use strict";angular.module("MemoryPlayer").config(MemoryPlayerConfig.instance),angular.module("MemoryPlayer").run(MemoryPlayerRun.instance)}();var MemoryPlayerAPI=function(){/**
     * Implements IMemoryPlayerAPI
     * @constructs MemoryPlayerAPI
     * @param {IHttpService} $http - The core angular http service.
     * @param {ILogService} $log - The core angular log service.
     */
function a(a,b){this.$http=a,this.$log=b,/**
         * @memberof MemoryPlayerAPI
         * @member {string} playlists - The path to playlists json file.
         * @private
         */
this.playlists="/lib/memory-player/dist/json/playlists.json"}/**
     * Removes player if playlists unavailable.
     * @memberof MemoryPlayerAPI
     * @instance
     * @private
     */
/**
     * Gets JSON file containing playlists.
     * @memberof MemoryPlayerAPI
     * @instance
     * @returns {IHttpPromise<IPlaylists>} - playlists on success and null on failure.
     */
return a.prototype.removePlayer=function(){angular.element("#memory-player").remove()},a.prototype.getPlaylists=function(){var a=this;return this.$http.get(this.playlists).then(function(b){
// If response has data then return it
// If response has data then return it
// Removes player
return b.hasOwnProperty("data")&&null!==b.data?b.data:(a.removePlayer(),null)}).catch(function(b){
// Removes player
// Logs error
return a.removePlayer(),a.$log.log("XHR Failed for getPlaylists."),b.data&&a.$log.log(b.data),null})},a}();MemoryPlayerAPI.instance=["$http","$log",MemoryPlayerAPI],function(){"use strict";angular.module("MemoryPlayer").service("MemoryPlayerAPI",MemoryPlayerAPI.instance)}();var MemoryPlayerControls=function(){/**
     * Implements IMemoryPlayerControls
     * @constructs MemoryPlayerControls
     * @param {IRootScopeService} $rootScope - The core angular root scope service.
     * @param {MemoryPlayerProvider} JPlayer - The provider service that manages jplayer.
     * @param {IMemoryPlayerState} MemoryPlayerState - The service that manages memory player state.
     */
function a(a,b,c){var d=this;this.$rootScope=a,this.JPlayer=b,this.MemoryPlayerState=c,
// Stores player id for optimization
this.jPlayerId=this.JPlayer.ids.jPlayer,
// Waits for player ready
this.$rootScope.$on("MP:Ready",function(a){/**
             * Observes player volume change.
             */
angular.element(d.jPlayerId).bind($.jPlayer.event.volumechange,function(a){
// Updates volume
d.MemoryPlayerState.setVolume(a.jPlayer.options.volume),
// Updates is muted
d.MemoryPlayerState.setIsMuted(a.jPlayer.options.muted)}),/**
             * Observes current track ended.
             */
angular.element(d.jPlayerId).bind($.jPlayer.event.ended,function(){
// If playlist is not over then update state, else start from beginning
if(d.isEnd())d.$rootScope.$evalAsync(function(){
// Starts playlist from beginning
d.selectTrack(0)});else{
// Gets next track id
var a=d.MemoryPlayerState.getTrackId()+1;d.$rootScope.$evalAsync(function(){
// Updates current track
d.MemoryPlayerState.setTrack(a)})}})}),/**
         * Observes open playlist dropdown click inside to prevent close.
         */
angular.element("#memory-player").on("click.mp.dropdown",".mp-dropdown-menu",function(a){a.stopPropagation()}),/**
         * Observes click to close open playlist dropdown.
         */
angular.element(document).on("click.mp.dropdown",function(a){var b=angular.element(".mp-dropdown");
// If dropdown is open then close it
!angular.element(a.target).closest(".mp-dropdown-toggle").length&&b.hasClass("open")&&(
// Closes dropdown
b.removeClass("open"),
// Updates aria for accessibility
b.find("a").attr("aria-expanded","false"))}),/**
         * Observes click to close open playlist dropdown on mobile devices.
         */
angular.element(document).on("click.mp.dropdown",".mp-dropdown-backdrop",function(a){
// Removes dropdown backdrop
angular.element(a.target).remove();var b=angular.element(".mp-dropdown");
// Closes dropdown
b.removeClass("open"),
// Updates aria for accessibility
b.find("a").attr("aria-expanded","false")}),/**
         * Observe custom event that YouTube video has played and prevents simultaneous playback.
         */
angular.element(document).on("YT.VideoPlayed",function(){
// If player is playing then toggle playback to pause
d.MemoryPlayerState.getIsPaused()||
// Pauses player
d.play()})}/**
     * Checks if current track is last in playlist.
     * @memberof MemoryPlayerControls
     * @instance
     * @returns {boolean} - True if track is last else false.
     * @private
     */
/**
     * Sets player to max volume.
     * @memberof MemoryPlayerControls
     * @instance
     */
/**
     * Toggles mute and unmute.
     * @memberof MemoryPlayerControls
     * @instance
     */
/**
     * Plays next track.
     * @memberof MemoryPlayerControls
     * @instance
     */
/**
     * Toggles play and pause.
     * @memberof MemoryPlayerControls
     * @instance
     */
/**
     * Plays previous track.
     * @memberof MemoryPlayerControls
     * @instance
     */
/**
     * Restarts player with previous settings.
     * @memberof MemoryPlayerControls
     * @instance
     * @param {IRestartSettings} settings - Settings required to restart player.
     * @private
     */
/**
     * Plays selected playlist.
     * @memberof MemoryPlayerControls
     * @instance
     * @param {string} playlistName - The name of selected playlist.
     */
/**
     * Plays selected track.
     * @memberof MemoryPlayerControls
     * @instance
     * @param {number} trackIndex - The index of selected track in playlist.
     */
/**
     * Creates player and executes restart with previous settings if available.
     * @memberof MemoryPlayerControls
     * @instance
     * @param {string} playlist - The name of current playlist.
     * @param {IRestartSettings} settings - Settings required to restart player.
     */
/**
     * Toggles playlist dropdown.
     * @memberof MemoryPlayerControls
     * @instance
     * @param {JQueryEventObject} $event - The event from trigging element.
     */
return a.prototype.isEnd=function(){return!(this.MemoryPlayerState.getTrackId()+1<this.MemoryPlayerState.getPlaylist().trackCount)},a.prototype.maxVolume=function(){
// If muted then unmute
this.MemoryPlayerState.getIsMuted()&&(
// Unmutes player
angular.element(this.jPlayerId).jPlayer("unmute"),
// Updates is muted
this.MemoryPlayerState.setIsMuted(!1)),
// Sets max volume
angular.element(this.jPlayerId).jPlayer("volume",1)},a.prototype.mute=function(){
// Gets is muted
var a=this.MemoryPlayerState.getIsMuted();
// Toggles mute
a?angular.element(this.jPlayerId).jPlayer("unmute"):angular.element(this.jPlayerId).jPlayer("mute"),
// Updates is muted
this.MemoryPlayerState.setIsMuted(!a)},a.prototype.next=function(){
// If current track is not last in playlist then play next
if(!this.isEnd()){
// Gets next track id
var a=this.MemoryPlayerState.getTrackId()+1;
// Updates current track
this.MemoryPlayerState.setTrack(a),
// Plays next track
this.JPlayer.instance().next(),
// Updates play state
this.MemoryPlayerState.setIsPaused(!1)}},a.prototype.play=function(){
// Gets play state
var a=this.MemoryPlayerState.getIsPaused();
// Toggles play
a?this.JPlayer.instance().play():this.JPlayer.instance().pause(),
// Updates play state
this.MemoryPlayerState.setIsPaused(!a),
// If playing then notify other media
a||angular.element(this.jPlayerId).trigger("MP.TrackPlayed")},a.prototype.previous=function(){
// Gets previous track id
var a=this.MemoryPlayerState.getTrackId()-1;
// If current track is not first in playlist then play previous
a>=0&&(
// Updates current track
this.MemoryPlayerState.setTrack(a),
// Plays previous track
this.JPlayer.instance().previous(),
// Updates play state
this.MemoryPlayerState.setIsPaused(!1))},a.prototype.restart=function(a){
// Updates current track
this.MemoryPlayerState.setTrack(a.track),
// Sets player to current track
this.JPlayer.instance().select(a.track),
// Sets player to current volume
angular.element(this.jPlayerId).jPlayer("volume",a.volume),
// If is muted then set player and update state
!0===a.isMuted&&(
// Mutes player
angular.element(this.jPlayerId).jPlayer("mute"),
// Updates is muted
this.MemoryPlayerState.setIsMuted(!0));
// Assigns variable to set playback state
var b="pause";
// If playing then update
!0!==a.isPaused&&(b="play",
// Updates play state
this.MemoryPlayerState.setIsPaused(!1)),
// Sets player to current time and playback state
angular.element(this.jPlayerId).jPlayer(b,a.time)},a.prototype.selectPlaylist=function(a){
// Updates current playlist
this.MemoryPlayerState.setPlaylist(a);
// Gets current playlist
var b=this.MemoryPlayerState.getPlaylist().playlist;
// Sets current playlist in player
this.JPlayer.instance().setPlaylist(b),
// Plays first track
this.JPlayer.instance().option("autoPlay",!0),
// Updates play state
this.MemoryPlayerState.setIsPaused(!1)},a.prototype.selectTrack=function(a){
// If selected track is different from current then set track and play, else toggle play
a!==this.MemoryPlayerState.getTrackId()?(
// Updates current track
this.MemoryPlayerState.setTrack(a),
// Plays selected track
this.JPlayer.instance().play(a),
// Updates play state
this.MemoryPlayerState.setIsPaused(!1)):
// Toggles play
this.play()},a.prototype.showtime=function(a,b){var c=this;
// Updates current playlist
this.MemoryPlayerState.setPlaylist(a),
// Creates jplayer instance with current playlist
this.JPlayer.create(this.MemoryPlayerState.getPlaylist().playlist),
// Waits for player ready
angular.element(this.jPlayerId).bind($.jPlayer.event.ready,function(){
// If settings exist then restart
angular.isDefined(b)&&
// Restarts player
c.restart(b),
// Removes loading class
angular.element("#memory-player").removeClass("mp-loading"),
// Notifies that player setup is complete
c.$rootScope.$emit("MP:Ready")})},a.prototype.toggleDropdown=function(a){
// Sets values to update dropdown state
var b=angular.element(event.target),c=b.closest(".mp-dropdown"),d=c.hasClass("open"),e=angular.element(document.createElement("div")).addClass("mp-dropdown-backdrop");
// Removes dropdown backdrop
angular.element(".mp-dropdown-backdrop").remove(),
// Resets each dropdown
angular.element(".mp-dropdown-toggle").each(function(){
// Ignores closed dropdowns
angular.element(this).closest(".mp-dropdown").hasClass("open")&&(
// Closes open dropdowns
angular.element(this).closest(".mp-dropdown").removeClass("open"),
// Updates aria for accessibility
angular.element(this).attr("aria-expanded","false"))}),
// If dropdown was closed then open it
d||(
// If user is on mobile device append backdrop
"ontouchstart"in document.documentElement&&e.appendTo("body"),
// Opens dropdown
c.addClass("open"),
// Updates aria for accessibility
b.closest(".mp-dropdown-toggle").attr("aria-expanded","true"))},a}();MemoryPlayerControls.instance=["$rootScope","JPlayer","MemoryPlayerState",MemoryPlayerControls],function(){"use strict";angular.module("MemoryPlayer").service("MemoryPlayerControls",MemoryPlayerControls.instance)}();var MemoryPlayerState=function(){/**
     * Implements IMemoryPlayerState
     * @constructs MemoryPlayerState
     * @param {MemoryPlayerProvider} JPlayer - The provider service that manages jplayer.
     */
function a(a){this.JPlayer=a,
// Initializes JPlayer id
this.jPlayerId=this.JPlayer.ids.jPlayer,
// Initializes some player settings
this.isMuted=!1,this.isPaused=!0,this.volume=.8}/**
     * Gets boolean that player is muted or not.
     * @memberof MemoryPlayerState
     * @instance
     * @returns {boolean} - True if player is muted else false.
     */
/**
     * Sets boolean that player is muted or not.
     * @memberof MemoryPlayerState
     * @instance
     * @param {boolean} isMuted - The muted state.
     */
/**
     * Gets boolean that player is paused or not.
     * @memberof MemoryPlayerState
     * @instance
     * @returns {boolean} - True if player is paused else false.
     */
/**
     * Sets boolean that player is paused or not.
     * @memberof MemoryPlayerState
     * @instance
     * @param {boolean} isPaused - The play state.
     */
/**
     * Gets current playlist.
     * @memberof MemoryPlayerState
     * @instance
     * @returns {IPlaylist} - The playlist.
     */
/**
     * Sets current playlist.
     * @memberof MemoryPlayerState
     * @instance
     * @param {string} playlistName - The name of selected playlist.
     */
/**
     * Gets current playlist id.
     * @memberof MemoryPlayerState
     * @instance
     * @returns {string} - The id of playlist.
     */
/**
     * Gets playlists.
     * @memberof MemoryPlayerState
     * @instance
     * @returns {IPlaylists} - The playlists.
     */
/**
     * Sets playlists returned by API.
     * @memberof MemoryPlayerState
     * @instance
     * @param {IPlaylists} playlists - The playlists.
     */
/**
     * Gets current playback time of player.
     * @memberof MemoryPlayerState
     * @instance
     * @returns {number} - The playback time of player.
     */
/**
     * Gets current track.
     * @memberof MemoryPlayerState
     * @instance
     * @returns {ITrack} - The track.
     */
/**
     * Sets current track.
     * @memberof MemoryPlayerState
     * @instance
     * @param {number} trackIndex - The id of selected track.
     */
/**
     * Gets current track id.
     * @memberof MemoryPlayerState
     * @instance
     * @returns {number} - The id of track.
     */
/**
     * Gets current volume of player.
     * @memberof MemoryPlayerState
     * @instance
     * @returns {string} - The 2 digit decimal volume of player.
     */
/**
     * Sets volume of player.
     * @memberof MemoryPlayerState
     * @instance
     */
return a.prototype.getIsMuted=function(){return this.isMuted},a.prototype.setIsMuted=function(a){
// Updates muted state
this.isMuted=a},a.prototype.getIsPaused=function(){return this.isPaused},a.prototype.setIsPaused=function(a){
// Updates play state
this.isPaused=a},a.prototype.getPlaylist=function(){return this.currentPlaylist},a.prototype.setPlaylist=function(a){
// Updates current playlist
this.currentPlaylist=this.playlists[a],
// Sets current track to first track in current playlist
this.setTrack(0)},a.prototype.getPlaylistId=function(){return this.currentPlaylist._id},a.prototype.getPlaylists=function(){return this.playlists},a.prototype.setPlaylists=function(a){
// Updates current playlists
this.playlists=a},a.prototype.getTime=function(){
// Rounds current playback time
return Math.floor(angular.element(this.jPlayerId).data("jPlayer").status.currentTime)},a.prototype.getTrack=function(){return this.currentTrack},a.prototype.setTrack=function(a){
// Updates current track
this.currentTrack=this.currentPlaylist.playlist[a]},a.prototype.getTrackId=function(){return this.currentTrack._id},a.prototype.getVolume=function(){return this.volume.toFixed(2)},a.prototype.setVolume=function(a){this.volume=a},a}();MemoryPlayerState.instance=["JPlayer",MemoryPlayerState],function(){"use strict";angular.module("MemoryPlayer").service("MemoryPlayerState",MemoryPlayerState.instance)}();var MemoryPlayerSharing=function(){/**
     * Implements IMemoryPlayerSharing
     * @constructs MemoryPlayerSharing
     * @param {IRootScopeService} $rootScope - The core angular root scope service.
     * @param {MemoryPlayerProvider} JPlayer - The provider service that manages jplayer.
     * @param {IMemoryPlayerState} MemoryPlayerState - The service that manages memory player state.
     */
function a(a,b,c){var d=this;this.$rootScope=a,this.JPlayer=b,this.MemoryPlayerState=c,/**
         * @memberof MemoryPlayerController
         * @member {string} sharelink - The link back URL to share media in memory player.
         */
this.sharelink=window.location.protocol+"//"+window.location.hostname+window.location.pathname,
// Stores player id for optimization
this.jPlayerId=this.JPlayer.ids.jPlayer,
// Initializes share link to ignore time
this.isTimeUsed=!1,
// Sets initial start time for share link
this.sharelinkTime="00:00",
// Sets initial values for share link
angular.isDefined(this.MemoryPlayerState.getPlaylist())&&this.setShareVal("playlist",this.MemoryPlayerState.getPlaylist()._id),angular.isDefined(this.MemoryPlayerState.getTrack())&&this.setShareVal("track",this.MemoryPlayerState.getTrack()._id),
// Watches state service for playlist change
this.$rootScope.$watch(function(){return d.MemoryPlayerState.getPlaylist()},function(a,b){
// If playlist changes then update
angular.isDefined(a)&&a!==b&&
// Updates current playlist
d.setShareVal("playlist",a._id)}),
// Watches state service for track change
this.$rootScope.$watch(function(){return d.MemoryPlayerState.getTrack()},function(a,b){
// If track changes then update
angular.isDefined(a)&&a!==b&&(
// Updates current track
d.setShareVal("track",a._id),
// Resets is time used
d.isTimeUsed&&d.useTime())}),
// Waits for player ready
this.$rootScope.$on("MP:Ready",function(a){/**
             * Observes player loaded.
             */
angular.element(d.jPlayerId).bind($.jPlayer.event.loadeddata,function(a){d.$rootScope.$evalAsync(function(){
// Updates track length
d.trackDuration=a.jPlayer.status.duration})}),/**
             * Observes time updated.
             */
angular.element(d.jPlayerId).bind($.jPlayer.event.timeupdate,function(a){d.$rootScope.$evalAsync(function(){
// Updates share link time
d.sharelinkTime=$.jPlayer.convertTime(a.jPlayer.status.currentTime)})})})}/**
     * Cancels timer when user focuses start time input.
     * @memberof MemoryPlayerSharing
     * @instance
     */
/**
     * Updates value specified by key.
     * @memberof MemoryPlayerSharing
     * @instance
     * @param {string} key - The key of value to be set.
     * @param {string | number} value - The value to set.
     */
/**
     * Copies share link to clipboard.
     * @memberof MemoryPlayerSharing
     * @instance
     */
/**
     * Updates time in share link.
     * @memberof MemoryPlayerSharing
     * @instance
     */
/**
     * Updates the share link time value when start time is used.
     * @memberof MemoryPlayerSharing
     * @instance
     */
return a.prototype.cancelTimer=function(){
// Cancels time update observer
angular.element(this.jPlayerId).unbind($.jPlayer.event.timeupdate)},a.prototype.setShareVal=function(a,b){
// Sets default share link values
var c=[],d={name:"playlist",value:null},e={name:"track",value:null},f={name:"time",value:0},g={name:"volume",value:.8},h={name:"isMuted",value:!1},i={name:"isPaused",value:!1},j=this.sharelink.split("?")[1]||null;
// If share link is a string convert params to objects
if(angular.isString(j)){
// Decodes the URI
j=decodeURIComponent(j.replace(/\+/g,"%20"));
// Stores all editable values from prior setting
j.split(/&(?!amp;)/g).map(function(a){var b=a.split("=");switch(b[0]){case"playlist":d.value=b[1];break;case"track":e.value=b[1];break;case"time":f.value=b[1]}})}
// Updates edited value
switch(a){case"playlist":d.value=b;break;case"track":e.value=b;break;case"time":var k=b;
// If time has a semicolon convert to seconds
k.indexOf(":")>-1&&(
// Converts hh:mm:ss to seconds
k=k.split(":").reverse().map(Number).reduce(function(a,b,c){return a+b*Math.pow(60,c)})),
// If start time is less than track length set value, else start from beginning
f.value=k<this.trackDuration?k:0}
// Stores all values in ordered array
c.push(d),c.push(e),c.push(f),c.push(g),c.push(h),c.push(i);
// Converts array to query string
var l=$.param(c);
// Sets share link with updated values
this.sharelink=this.sharelink.split("?")[0]+"?"+l},a.prototype.share=function(){
// Selects share link text
document.getElementById("mp-share-link").select(),
// Copies text to clipboard
document.execCommand("copy")},a.prototype.updateTime=function(){
// Includes time in share link
this.isTimeUsed=!0,
// Sets time in share link
this.setShareVal("time",this.sharelinkTime)},a.prototype.useTime=function(){
// Sets use time to latest user setting
this.isTimeUsed=!this.isTimeUsed,
// If time is use then set start time, else start at beginning
this.isTimeUsed?
// Set start time
this.setShareVal("time",this.sharelinkTime):
// Start at beginning
this.setShareVal("time","0")},a}();MemoryPlayerSharing.instance=["$rootScope","JPlayer","MemoryPlayerState",MemoryPlayerSharing],function(){"use strict";angular.module("MemoryPlayer").service("MemoryPlayerSharing",MemoryPlayerSharing.instance)}();var MemoryPlayerController=function(){function a(a,b,c,d){var e=this;this.$scope=a,this.MemoryPlayerState=b,this.MemoryPlayerControls=c,this.MemoryPlayerSharing=d,this.isShareable=!0,this.playlists=this.MemoryPlayerState.getPlaylists(),this.currentPlaylist=this.MemoryPlayerState.getPlaylist(),this.currentTrack=this.MemoryPlayerState.getTrack(),this.isPaused=this.MemoryPlayerState.getIsPaused(),this.$scope.$watch(function(){return e.MemoryPlayerState.getPlaylists()},function(a,b){angular.isDefined(a)&&a!==b&&(e.playlists=a)}),this.$scope.$watch(function(){return e.MemoryPlayerState.getPlaylist()},function(a,b){angular.isDefined(a)&&a!==b&&(e.currentPlaylist=a)}),this.$scope.$watch(function(){return e.MemoryPlayerState.getTrack()},function(a,b){angular.isDefined(a)&&a!==b&&(e.currentTrack=a)}),this.$scope.$watch(function(){return e.MemoryPlayerState.getIsPaused()},function(a,b){angular.isDefined(a)&&a!==b&&(e.isPaused=a)})}return a.prototype.cancelTimer=function(){this.MemoryPlayerSharing.cancelTimer()},a.prototype.maxVolume=function(){this.MemoryPlayerControls.maxVolume()},a.prototype.mute=function(){this.MemoryPlayerControls.mute()},a.prototype.next=function(){this.MemoryPlayerControls.next()},a.prototype.play=function(){this.MemoryPlayerControls.play()},a.prototype.previous=function(){this.MemoryPlayerControls.previous()},a.prototype.selectPlaylist=function(a){this.MemoryPlayerControls.selectPlaylist(a)},a.prototype.selectTrack=function(a){this.MemoryPlayerControls.selectTrack(a)},a.prototype.share=function(){this.MemoryPlayerSharing.share()},a.prototype.toggleDropdown=function(a){this.MemoryPlayerControls.toggleDropdown(a)},a.prototype.updateTime=function(){this.MemoryPlayerSharing.updateTime()},a.prototype.useTime=function(){this.MemoryPlayerSharing.useTime()},a}();MemoryPlayerController.instance=["$scope","MemoryPlayerState","MemoryPlayerControls","MemoryPlayerSharing",MemoryPlayerController],function(){"use strict";angular.module("MemoryPlayer").controller("MemoryPlayerController",MemoryPlayerController.instance)}();var MemoryPlayerDirective=function(){function a(b,c,d,e){var f=this;this.$location=b,this.MemoryPlayerAPI=c,this.MemoryPlayerState=d,this.MemoryPlayerControls=e,this.restrict="A",this.scope=!0,this.replace=!0,this.templateUrl="/lib/memory-player/dist/html/memory-player.html",a.prototype.link=function(a,b,c){var d=f.$location.search();f.MemoryPlayerAPI.getPlaylists().then(function(a){if(f.MemoryPlayerState.setPlaylists(a),isRestartable(d)){var b={track:parseInt(d.track),time:parseInt(d.time),volume:parseFloat(d.volume),isMuted:d.isMuted,isPaused:d.isPaused};f.MemoryPlayerControls.showtime(d.playlist,b)}else{var c=Object.keys(a)[0];f.MemoryPlayerControls.showtime(a[c]._id)}}),a.$on("$locationChangeStart",function(a,b,c){if(b!==c){var d=f.$location.url();f.$location.path(d.split("?")[0]).search({playlist:f.MemoryPlayerState.getPlaylistId(),track:f.MemoryPlayerState.getTrackId(),time:f.MemoryPlayerState.getTime(),volume:f.MemoryPlayerState.getVolume(),isMuted:f.MemoryPlayerState.getIsMuted(),isPaused:f.MemoryPlayerState.getIsPaused()})}})}}return a.instance=function(){var b=function(b,c,d,e){return new a(b,c,d,e)};return b.$inject=["$location","MemoryPlayerAPI","MemoryPlayerState","MemoryPlayerControls"],b},a}();!function(){"use strict";angular.module("MemoryPlayer").directive("memoryPlayer",MemoryPlayerDirective.instance())}();var SharingDirective=function(){function a(b){this.MemoryPlayerSharing=b,this.restrict="A",this.scope=!0,this.replace=!0,this.templateUrl="/lib/memory-player/dist/html/mp-sharing.html",a.prototype.link=function(a,b,c){}}return a.instance=function(){var b=function(b){return new a(b)};return b.$inject=["MemoryPlayerSharing"],b},a}();!function(){"use strict";angular.module("MemoryPlayer").directive("sharing",SharingDirective.instance())}();